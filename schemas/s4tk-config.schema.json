{
  "$schema": "http://json-schema.org/schema",
  "definitions": {
    "stringTableLocale": {
      "type": "string",
      "enum": [
        "English",
        "ChineseSimplified",
        "ChineseTraditional",
        "Czech",
        "Danish",
        "Dutch",
        "Finnish",
        "French",
        "German",
        "Italian",
        "Japanese",
        "Korean",
        "Norwegian",
        "Polish",
        "Portuguese",
        "Russian",
        "Spanish",
        "Swedish"
      ]
    }
  },
  "type": "object",
  "required": [
    "buildInstructions"
  ],
  "additionalProperties": false,
  "properties": {
    "buildInstructions": {
      "type": "object",
      "description": "Information about where your source files are, how they should be built into packages, and where those packages should go.",
      "required": [
        "source",
        "destinations",
        "packages"
      ],
      "additionalProperties": false,
      "properties": {
        "source": {
          "type": "string",
          "description": "Absolute or relative path to the folder that contains all of the resources for this project.\n\nAbsolute paths must be platform-appropriate ('\\\\' for Windows, '/' for Unix/macOS), but relative paths can use either kind of slash (they will be normalized)."
        },
        "destinations": {
          "type": "array",
          "description": "List of absolute and/or relative paths to folders where all built packages should be output to.\n\nAbsolute paths must be platform-appropriate ('\\\\' for Windows, '/' for Unix/macOS), but relative paths can use either kind of slash (they will be normalized).",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        },
        "packages": {
          "type": "array",
          "description": "List of packages to build to each folder within `destinations`.",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": [
              "filename",
              "include"
            ],
            "additionalProperties": false,
            "properties": {
              "filename": {
                "type": "string",
                "description": "What to name the built package file."
              },
              "include": {
                "type": "array",
                "description": "List of glob patterns (relative to the source folder) that capture all files that should be built into this package.\n\nBoth Windows and Unix/macOS paths are accepted; they will be automatically converted as needed.",
                "items": {
                  "type": "string"
                }
              },
              "exclude": {
                "type": "array",
                "description": "List of glob patterns (relative to the source folder) of files that should be excluded, even if they pass one of the `include` patterns.\n\nBoth Windows and Unix/macOS paths are accepted; they will be automatically converted as needed.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "buildSettings": {
      "type": "object",
      "description": "Settings that affect the build process.",
      "additionalProperties": false,
      "properties": {
        "allowEmptyPackages": {
          "type": "boolean",
          "description": "Whether or not packages are allowed to be empty. If false, then packages with glob patterns that do not match any files will cause the build process to fail. You should not set this to true unless you have a legitimate reason for doing so, as this setting will help you catch common bugs with glob patterns.",
          "default": false
        },
        "allowFolderCreation": {
          "type": "boolean",
          "description": "Whether or not the S4TK extension is allowed to create missing folders in order to output to `destinations` while building. If setting this to true, it is recommended that you do a Dry Run first to see where your packages are going to be written to.",
          "default": false
        },
        "allowMissingSourceFiles": {
          "type": "boolean",
          "description": "Whether or not files within the source folder are allowed to be excluded from a build. If false, then any files within your source folder that are not captured by at least one package's glob patterns will cause the build process to fail. You should not set this to true unless you have a legitimate reason for doing so, as this setting will help you catch common bugs with glob patterns.",
          "default": false
        },
        "allowPackageOverlap": {
          "type": "boolean",
          "description": "Whether or not packages are allowed to contain the same resources. If false, then packages with overlapping glob patterns will cause the build process to fail. You should not set this to true unless you have a legitimate reason for doing so, as this setting will help you catch common bugs with glob patterns.",
          "default": false
        },
        "generateMissingLocales": {
          "type": "boolean",
          "description": "Whether or not to generate string tables for all missing locales (using the text from the default locale).",
          "default": true
        },
        "mergeStringTablesInSamePackage": {
          "type": "boolean",
          "description": "Whether or not all of the string tables of the same locale being written to the same package should be merged.",
          "default": true
        },
        "minifyTuning": {
          "type": "boolean",
          "description": "Whether or not to minify tuning (i.e. remove all whitespace, comments, and processing instructions).",
          "default": false
        },
        "outputBuildSummary": {
          "type": "string",
          "description": "Whether or not the `BuildSummary.json` file should be generated, and what information it should contain.\n\nFull build summaries are useful for debugging because they include information about every single resource that is written to every single package, but this can make it lengthy.\n\nPartial build summaries exclude this information and only show how the config was interpreted and what warnings were found, if any.",
          "default": "partial",
          "enum": [
            "none",
            "partial",
            "full"
          ]
        }
      }
    },
    "releaseSettings": {
      "type": "object",
      "description": "Settings that affect builds made for release (i.e. a zipped version of all of your packages).",
      "additionalProperties": false,
      "properties": {
        "filename": {
          "type": "string",
          "description": "Name of the ZIP file that contains all of your mod files.",
          "default": ""
        },
        "otherFilesToInclude": {
          "type": "array",
          "description": "List of absolute and/or relative paths to all additional files that should be zipped with your packages.\n\nAbsolute paths must be platform-appropriate ('\\\\' for Windows, '/' for Unix/macOS), but relative paths can use either kind of slash (they will be normalized).",
          "items": {
            "type": "string"
          }
        },
        "overrideDestinations": {
          "type": "array",
          "description": "List of absolute and/or relative paths to folders where the ZIP file should be output to. If omitted or empty, then `buildInstructions.destinations` will be used.\n\nAbsolute paths must be platform-appropriate ('\\\\' for Windows, '/' for Unix/macOS), but relative paths can use either kind of slash (they will be normalized).",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "workspaceSettings": {
      "type": "object",
      "description": "Settings that affect how the S4TK works while you're using it.",
      "additionalProperties": false,
      "properties": {
        "defaultLocale": {
          "$ref": "#/definitions/stringTableLocale",
          "description": "The language that you write your strings in.",
          "default": "English"
        },
        "defaultStringTable": {
          "type": "string",
          "description": "Absolute or relative path to the string table (binary or JSON) that serves as the default for this project. Any strings generated via commands will be added to this string table.\n\nAbsolute paths must be platform-appropriate ('\\\\' for Windows, '/' for Unix/macOS), but relative paths can use either kind of slash (they will be normalized)."
        },
        "newStringsToStartOfTable": {
          "type": "boolean",
          "description": "Whether or not to insert strings generated via commands to the beginning of the string table, rather than to the end (very convenient for STBL JSONs).",
          "default": true
        },
        "newStringTableJsonType": {
          "type": "string",
          "description": "Which kind of STBL JSON should be generated by the command.",
          "enum": [
            "array",
            "object"
          ],
          "default": "object"
        },
        "showCopyConfirmationPopup": {
          "type": "boolean",
          "description": "Whether or not to show a popup to confirm when something has been copied to your clipboard.",
          "default": true
        },
        "showStblJsonMetaDataButton": {
          "type": "boolean",
          "description": "Whether or not to show the button in array-based STBL JSONs that adds meta data, converting it to an object-based STBL JSON.",
          "default": true
        },
        "showXmlKeyOverrideButtons": {
          "type": "boolean",
          "description": "Whether or not to show the Type/Group/Instance override buttons within XML files. If the buttons are hidden, you can still add the comments to override them manually.",
          "default": true
        },
        "spacesPerIndent": {
          "type": "integer",
          "description": "Number of spaces to use per indent level while formatting JSON and XML documents.",
          "minimum": 1,
          "default": 2
        }
      }
    }
  }
}